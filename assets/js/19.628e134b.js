(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{285:function(s,t,e){"use strict";e.r(t);var a=e(13),l=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"样式和类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#样式和类"}},[s._v("#")]),s._v(" 样式和类")]),s._v(" "),t("p",[s._v("设置元素样式的方式：")]),s._v(" "),t("ul",[t("li",[s._v("在 CSS 中创建一个类，并添加它："),t("div",{staticClass:"..."})]),s._v(" "),t("li",[s._v("将属性直接写入 style："),t("div",{staticStyle:{}},[s._v("。")])])]),s._v(" "),t("h2",{attrs:{id:"classname-和-classlist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#classname-和-classlist"}},[s._v("#")]),s._v(" className 和 classList")]),s._v(" "),t("p",[s._v("elem.classList 是一个特殊的对象，它具有 add/remove/toggle 单个类的方法。\nclassList 的方法：")]),s._v(" "),t("ul",[t("li",[s._v("elem.classList.add/remove(class) —— 添加/移除类。")]),s._v(" "),t("li",[s._v("elem.classList.toggle(class) —— 如果类不存在就添加类，存在就移除它。")]),s._v(" "),t("li",[s._v("elem.classList.contains(class) —— 检查给定类，返回 true/false。")])]),s._v(" "),t("h2",{attrs:{id:"元素样式style"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元素样式style"}},[s._v("#")]),s._v(" 元素样式style")]),s._v(" "),t("p",[s._v('elem.style 属性是一个对象，它对应于 "style" 特性（attribute）中所写的内容。elem.style.width="100px" 的效果等价于我们在 style 特性中有一个 width:100px 字符串\n'),t("br"),s._v("多词（multi-word）属性，使用驼峰式 camelCase：")]),s._v(" "),t("h2",{attrs:{id:"计算样式-getcomputedstyle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算样式-getcomputedstyle"}},[s._v("#")]),s._v(" 计算样式：getComputedStyle")]),s._v(" "),t("p",[s._v('想知道元素的 size，margins 和 color。应该怎么获取？\nstyle 属性仅对 "style" 特性（attribute）值起作用，而没有任何 CSS 级联（cascade）。\n因此我们无法使用 elem.style 读取来自 CSS 类的任何内容。\n语法：')]),s._v(" "),t("div",{staticClass:"language-html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[s._v("getComputedStyle(element, [pseudo])\n//element需要被读取样式值的元素\n//pseudo伪元素（如果需要），例如 ::before。空字符串或无参数则意味着元素本身。\n")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);