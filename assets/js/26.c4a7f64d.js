(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{295:function(t,e,a){"use strict";a.r(e);var s=a(13),l=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"创建自定义事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建自定义事件"}},[t._v("#")]),t._v(" 创建自定义事件")]),t._v(" "),e("h2",{attrs:{id:"事件构造器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件构造器"}},[t._v("#")]),t._v(" 事件构造器")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v("let event = new Event(type[, options]);\n")])])]),e("ul",[e("li",[e("p",[t._v('type —— 事件类型，可以是像这样 "click" 的字符串，或者我们自己的像这样 "my-event" 的参数。')])]),t._v(" "),e("li",[e("p",[t._v("options —— 具有两个可选属性的对象：")])])]),t._v(" "),e("p",[t._v("** bubbles: true/false —— 如果为 true，那么事件会冒泡。\n** cancelable: true/false —— 如果为 true，那么“默认行为”就会被阻止。稍后我们会看到对于自定义事件，它意味着什么。\n默认情况下，以上两者都为 false：{bubbles: false, cancelable: false}。")]),t._v(" "),e("h2",{attrs:{id:"dispatchevent"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dispatchevent"}},[t._v("#")]),t._v(" dispatchEvent")]),t._v(" "),e("p",[t._v("使用 elem.dispatchEvent(event) 调用在元素上“运行”它")])])}),[],!1,null,null,null);e.default=l.exports}}]);